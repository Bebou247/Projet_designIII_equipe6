import serial
import numpy as np
from scipy.interpolate import Rbf
import re
import time
import matplotlib.pyplot as plt
import os
import csv
from datetime import datetime
import pandas as pd
from pathlib import Path
from scipy.ndimage import gaussian_filter

class TraitementDonnees:
    VREF = 3.003
    R_FIXED = 4700

        # Dans la classe TraitementDonnees
    def __init__(self, port="/dev/cu.usbmodem14201", coeffs_path="data/raw/coefficients.npy", simulation=False):
        self.port = port
        self.simulation = simulation
        self.coefficients = np.load(coeffs_path, allow_pickle=True)

        # üîÅ R24 √† l‚Äôancienne position de R24 (canal 11), R12 supprim√©e
        self.positions = [
            ("R1", (11, 0)), ("R2", (3, 0)), ("R3", (-3, 0)), ("R4", (-11, 0)),
            ("R5", (8, 2.5)), ("R6", (0, 2.5)), ("R7", (-8, 2.5)), ("R8", (8, 5.5)),
            ("R9", (0, 5.5)), ("R10", (-8, 5.5)), ("R11", (4.5, 8)), ("R24", (-3.5, -11.25)),
            ("R13", (4, 11.25)), ("R14", (-4, 11.25)), ("R15", (8, -2.5)), ("R16", (0, -2.5)),
            ("R17", (-8, -2.5)), ("R18", (8, -5.5)), ("R19", (0, -5.5)), ("R20", (-8, -5.5)),
            ("R21", (4.5, -8))
        ]
        # Canaux 0 √† 20 utilis√©s pour les thermistances R1-R11, R13-R21, R24(sur canal 11)
        self.indices_√†_garder = list(range(21))
        self.simulation_data = None
        self.simulation_index = 0  # Te permet de d√©cider √† quel rang tu commences
        # Noms des colonnes attendues dans le CSV (bas√©s sur self.positions et self.indices_√†_garder)
        self.simulation_columns = [self.positions[i][0] for i in self.indices_√†_garder]

        if self.simulation:
            self.ser = None
            print("[SIMULATION] Mode simulation activ√©.")
            try:
                # Chemin vers le fichier CSV relatif au script Test.py
                script_dir = Path(__file__).parent
                # Te permet de choisir quel fichier prendre
                simulation_file_path = script_dir.parent / "data" / "Hauteur 6.csv"
                # Lecture du CSV, essayez diff√©rents s√©parateurs si n√©cessaire (ex: sep=';')
                self.simulation_data = pd.read_csv(simulation_file_path) # Adaptez le s√©parateur si besoin: sep=';'
                print(f"[SIMULATION] Chargement du fichier CSV : {simulation_file_path.resolve()}")

                # V√©rification des colonnes n√©cessaires
                missing_cols = [col for col in self.simulation_columns if col not in self.simulation_data.columns]
                if missing_cols:
                    print(f"[ERREUR SIMULATION] Colonnes manquantes dans {simulation_file_path.name}: {missing_cols}")
                    self.simulation_data = None # Invalider les donn√©es
                else:
                    # Conversion des colonnes requises en num√©rique, g√®re les erreurs
                    for col in self.simulation_columns:
                        self.simulation_data[col] = pd.to_numeric(self.simulation_data[col], errors='coerce')
                    print(f"[SIMULATION] Fichier CSV charg√©. {len(self.simulation_data)} lignes trouv√©es.")
                    if self.simulation_data.isnull().values.any():
                        print("[AVERTISSEMENT SIMULATION] Le fichier CSV contient des valeurs non num√©riques apr√®s conversion.")


            except FileNotFoundError:
                print(f"[ERREUR SIMULATION] Fichier non trouv√© : {simulation_file_path.resolve()}")
                self.simulation_data = None
            except Exception as e:
                print(f"[ERREUR SIMULATION] Impossible de charger ou lire le fichier CSV : {e}")
                self.simulation_data = None
        else:
            # Logique originale pour la connexion s√©rie
            try:
                self.ser = serial.Serial(self.port, 9600, timeout=1)
                print(f"[INFO] Port s√©rie connect√© sur {self.port}")
            except Exception as e:
                print(f"[ERREUR] Impossible d'ouvrir le port s√©rie : {e}")
                self.ser = None

    def est_connecte(self):
        return self.ser is not None

    def steinhart_hart_temperature(self, R, A, B, C):
        return 1 / (A + B * np.log(R) + C * (np.log(R))**3)

    def compute_resistance(self, voltage):
        if voltage >= self.VREF:
            return float('inf')
        return self.R_FIXED * (voltage / (self.VREF - voltage))

    def compute_temperature(self, resistance, coeffs):
        A, B, C = coeffs
        kelvin = self.steinhart_hart_temperature(resistance, A, B, C)
        return kelvin - 273.15

    # Dans la classe TraitementDonnees
    def lire_donnees(self):
        if self.simulation:
            # En mode simulation CSV, cette fonction signale juste si les donn√©es sont pr√™tes.
            # get_temperatures lira directement depuis self.simulation_data.
            if self.simulation_data is not None and not self.simulation_data.empty:
                return True # Signal que les donn√©es de simulation CSV sont pr√™tes
            else:
                # Si le CSV n'a pas pu √™tre charg√©, on retourne None
                # print("[AVERTISSEMENT SIMULATION] Aucune donn√©e de simulation CSV disponible.")
                return None

        # --- Code original pour lire depuis le port s√©rie ---
        if self.ser is None:
            print("[ERREUR] Connexion s√©rie non √©tablie.")
            return None

        self.ser.reset_input_buffer()
        voltages_dict = {}
        start_time = time.time()
        timeout_sec = 2 # Augment√© l√©g√®rement pour √™tre s√ªr

        while True:
            current_time = time.time()
            if current_time - start_time > timeout_sec:
                print(f"‚ö†Ô∏è Temps de lecture d√©pass√© ({timeout_sec}s), donn√©es incompl√®tes.")
                # Retourne ce qui a √©t√© lu jusqu'√† pr√©sent ou None si rien
                return voltages_dict if voltages_dict else None

            try:
                # V√©rifier s'il y a des donn√©es √† lire pour √©viter de bloquer sur readline()
                if self.ser.in_waiting > 0:
                    line = self.ser.readline().decode(errors='ignore').strip()
                    if not line:
                        # Peut arriver si timeout court ou fin de ligne partielle
                        continue

                    # print(f"Ligne re√ßue: {line}") # Debug

                    if "Fin du balayage" in line:
                        # print("Fin du balayage d√©tect√©e.") # Debug
                        break # Sortir de la boucle while interne

                    match = re.search(r"Canal (\d+): ([\d.]+) V", line)
                    if match:
                        canal = int(match.group(1))
                        if canal in self.indices_√†_garder:
                            voltages_dict[canal] = float(match.group(2))
                            # print(f"Canal {canal} lu: {voltages_dict[canal]} V") # Debug

                else:
                    # Pas de donn√©es imm√©diatement disponibles, petite pause pour ne pas surcharger le CPU
                    time.sleep(0.01)

            except serial.SerialException as e:
                print(f"Erreur s√©rie pendant la lecture : {e}")
                self.ser = None # Marquer comme d√©connect√©
                return None
            except Exception as e:
                print(f"Erreur inattendue pendant la lecture s√©rie : {e}")
                # Continue d'essayer de lire ? Ou retourner None ?
                continue # On essaie de continuer

        # V√©rification apr√®s la sortie de boucle (Fin du balayage ou timeout)
        if len(voltages_dict) != len(self.indices_√†_garder):
            print(f"‚ö†Ô∏è Seulement {len(voltages_dict)}/{len(self.indices_√†_garder)} canaux requis re√ßus.")
            # D√©cider si retourner les donn√©es partielles ou None
            return None # Pr√©f√©rable de retourner None si incomplet

        # print("Donn√©es compl√®tes re√ßues.") # Debug
        return voltages_dict


    # Dans la classe TraitementDonnees
    def get_temperatures(self):
        if self.simulation:
            # --- Logique pour la simulation bas√©e sur CSV ---
            if self.simulation_data is not None and not self.simulation_data.empty:
                if self.simulation_index >= len(self.simulation_data):
                    self.simulation_index = 0 # Recommencer au d√©but du fichier

                # R√©cup√©rer la ligne actuelle du DataFrame
                current_data_row = self.simulation_data.iloc[self.simulation_index]
                self.simulation_index += 1

                # Cr√©er le dictionnaire de temp√©ratures directement depuis la ligne CSV
                temperature_dict = {}
                valid_data_found = False
                for i in self.indices_√†_garder:
                    thermistor_name = self.positions[i][0]
                    if thermistor_name in current_data_row and pd.notna(current_data_row[thermistor_name]):
                        temperature_dict[thermistor_name] = current_data_row[thermistor_name]
                        valid_data_found = True
                    else:
                        # G√©rer les donn√©es manquantes ou NaN pour ce thermistor dans cette ligne
                        # print(f"[AVERTISSEMENT SIMULATION] Donn√©e manquante/NaN pour {thermistor_name} √† l'index CSV {self.simulation_index-1}")
                        temperature_dict[thermistor_name] = np.nan # Utiliser NaN pour indiquer l'absence de donn√©e valide

                if not valid_data_found:
                    print(f"[ERREUR SIMULATION] Aucune donn√©e de temp√©rature valide trouv√©e √† l'index CSV {self.simulation_index-1}.")
                    return None # Retourner None si la ligne enti√®re est invalide

                return temperature_dict
            else:
                # --- Fallback: Si le CSV n'est pas charg√©, g√©n√©rer des temp√©ratures al√©atoires ---
                print("[SIMULATION] Donn√©es CSV non disponibles, g√©n√©ration de temp√©ratures al√©atoires.")
                # G√©n√®re des temp√©ratures al√©atoires dans une plage plausible
                random_temps = {self.positions[i][0]: np.random.uniform(20.0, 45.0)
                                for i in self.indices_√†_garder}
                return random_temps

        # --- Logique originale pour le mode non-simulation (lecture s√©rie) ---
        data_voltages = self.lire_donnees() # Lire les tensions depuis le port s√©rie
        if data_voltages is None:
            # lire_donnees a d√©j√† affich√© une erreur si n√©cessaire
            return None

        temperatures = []
        noms = [] # Garder une trace des noms dans le bon ordre

        for i in self.indices_√†_garder:
            nom_thermistor = self.positions[i][0]
            noms.append(nom_thermistor)

            if i not in data_voltages:
                print(f"[AVERTISSEMENT] Tension manquante pour le canal {i} ({nom_thermistor})")
                temperatures.append(np.nan) # Ajouter NaN si la tension manque
                continue # Passer au canal suivant

            voltage = data_voltages[i]

            # S√©lectionner les bons coefficients
            # Rappel: R24 (nom) est sur le canal 11 (index i) et utilise les coeffs[23]
            if i == 11: # Canal 11 correspond √† R24 dans self.positions
                if 23 < len(self.coefficients):
                    coeffs = self.coefficients[23]
                else:
                    print(f"[ERREUR] Index de coefficient 23 hors limites pour R24 (canal 11).")
                    temperatures.append(np.nan)
                    continue
            else: # Pour tous les autres canaux dans indices_√†_garder
                if i < len(self.coefficients):
                    coeffs = self.coefficients[i]
                else:
                    print(f"[ERREUR] Index de coefficient {i} hors limites pour {nom_thermistor}.")
                    temperatures.append(np.nan)
                    continue

            # Calculer r√©sistance et temp√©rature
            resistance = self.compute_resistance(voltage)
            if resistance == float('inf') or resistance <= 0: # G√©rer r√©sistance invalide
                # print(f"[AVERTISSEMENT] R√©sistance invalide ({resistance:.2f} Œ©) calcul√©e pour {nom_thermistor} (canal {i}) √† partir de {voltage:.3f} V.")
                temp = np.nan
            else:
                try:
                    temp = self.compute_temperature(resistance, coeffs)
                except ValueError: # np.log peut √©chouer si R est <= 0
                    # print(f"[AVERTISSEMENT] Erreur de calcul de temp√©rature pour {nom_thermistor} (R={resistance:.2f} Œ©).")
                    temp = np.nan

            temperatures.append(temp)

        # Cr√©er le dictionnaire final en associant les noms et les temp√©ratures calcul√©es
        # S'assurer que le nombre de noms et de temp√©ratures correspond
        if len(noms) != len(temperatures):
            print("[ERREUR CRITIQUE] Discordance entre noms et temp√©ratures calcul√©es.")
            return None

        return dict(zip(noms, temperatures))



    # Dans la classe TraitementDonnees (fichier Test.py)

    def afficher_heatmap_dans_figure(self, temperature_dict, fig, elapsed_time):
        fig.clear()
        ax = fig.add_subplot(111)

        x_orig, y_orig, t_orig = [], [], []
        valid_temps_list = [] # Pour calculer la moyenne

        # 1. Extraire les donn√©es valides des thermistances r√©elles
        for i in self.indices_√†_garder:
            name, pos = self.positions[i]
            temp_val = temperature_dict.get(name, np.nan) # Utiliser .get pour plus de s√ªret√©
            if pd.notna(temp_val): # Ignorer les NaN pour l'interpolation et la moyenne
                x_orig.append(pos[0])
                y_orig.append(pos[1])
                t_orig.append(temp_val)
                valid_temps_list.append(temp_val)
            # else: # Optionnel: si tu veux afficher les points NaN diff√©remment
            #     ax.scatter(pos[0], pos[1], color='gray', marker='x', s=30, label='NaN' if name == self.positions[self.indices_√†_garder[0]][0] else "") # Marquer les NaN

        # 2. Calculer la temp√©rature cible pour les bords
        if not valid_temps_list:
            print("[AVERTISSEMENT] Aucune donn√©e de temp√©rature valide pour calculer la moyenne des bords.")
            # Comportement par d√©faut : utiliser une temp√©rature fixe ou ne pas ajouter de bords
            target_edge_temp = 20.0 # Exemple: temp√©rature par d√©faut pour les bords
            # Ou tu pourrais choisir de ne pas ajouter de points de bord et retourner
            # ax.set_title("Donn√©es invalides pour la heatmap")
            # return
        else:
            avg_temp = np.mean(valid_temps_list)
            target_edge_temp = avg_temp - 1.0
            print(f"[INFO HEATMAP] Temp√©rature moyenne: {avg_temp:.2f}¬∞C, Temp√©rature des bords: {target_edge_temp:.2f}¬∞C")


        # 3. D√©finir les points virtuels sur le p√©rim√®tre
        r_max = 12.5 # Le rayon de ta carte thermique
        num_edge_points = 12 # Plus de points pour une meilleure contrainte (ajustable)
        edge_angles = np.linspace(0, 2 * np.pi, num_edge_points, endpoint=False)
        edge_x = r_max * np.cos(edge_angles)
        edge_y = r_max * np.sin(edge_angles)
        edge_t = [target_edge_temp] * num_edge_points # Tous les points de bord ont la temp√©rature cible

        # 4. Combiner les points r√©els et les points de bord
        x_combined = x_orig + list(edge_x)
        y_combined = y_orig + list(edge_y)
        t_combined = t_orig + edge_t

        # 5. V√©rifier s'il y a assez de points pour l'interpolation
        # Rbf a besoin d'au moins N+1 points en N dimensions (ici 2D, donc au moins 3 points)
        if len(x_combined) < 3:
            print("[ERREUR HEATMAP] Pas assez de points valides (r√©els + bords) pour l'interpolation.")
            ax.set_title("Pas assez de donn√©es pour la heatmap")
            ax.set_xlabel("X (mm)")
            ax.set_ylabel("Y (mm)")
            # Afficher les points originaux s'il y en a
            if x_orig:
                ax.scatter(x_orig, y_orig, color='black', marker='o', s=25)
            return # Quitter la fonction si pas assez de points

        # 6. Cr√©er l'interpolation RBF avec les donn√©es combin√©es
        # smooth=0.5 est une valeur de d√©part, tu peux l'ajuster pour plus ou moins de lissage
        # epsilon pourrait aussi √™tre ajust√© selon la fonction RBF choisie
        rbf = Rbf(x_combined, y_combined, t_combined, function='multiquadric', smooth=0.5)
        grid_size = 200

        # 7. D√©finir la grille et masquer l'ext√©rieur du cercle
        # Utiliser r_max pour la grille et le masque pour correspondre aux points de bord
        xi, yi = np.meshgrid(
            np.linspace(-r_max, r_max, grid_size),
            np.linspace(-r_max, r_max, grid_size)
        )

        ti = rbf(xi, yi)
        mask = xi**2 + yi**2 > r_max**2 # Masque bas√© sur le rayon o√π les points de bord ont √©t√© plac√©s
        ti_masked = np.ma.array(ti, mask=mask)
            # 8. Appliquer un filtre Gaussien aux donn√©es interpol√©es (non masqu√©es)
        #    Le param√®tre sigma contr√¥le le lissage. Ajuste-le si n√©cessaire (ex: 1, 2, 3...).
        #    mode='nearest' g√®re les bords de mani√®re raisonnable.
        sigma_filtre = 2 # A ajuster selon le niveau de lissage souhait√©
        ti_filtered = gaussian_filter(ti, sigma=sigma_filtre, mode='nearest')

        # 9. Appliquer le masque aux donn√©es filtr√©es pour chercher le max DANS le cercle
        ti_filtered_masked = np.ma.array(ti_filtered, mask=mask)

        # 10. Trouver l'index du maximum dans la grille filtr√©e et masqu√©e
        try:
            # argmax sur l'array masqu√© retourne l'index plat du max non masqu√©
            max_idx_flat = np.argmax(ti_filtered_masked)
            # Convertir l'index plat en indices 2D
            max_idx_2d = np.unravel_index(max_idx_flat, ti.shape)
            # R√©cup√©rer les coordonn√©es (x, y) correspondantes depuis la grille
            max_x = xi[max_idx_2d]
            max_y = yi[max_idx_2d]
            max_temp_val = ti_filtered_masked[max_idx_2d] # Temp√©rature max (liss√©e)
            point_max_trouve = True
            print(f"[INFO LASER] Point max d√©tect√© (apr√®s filtre) √† ({max_x:.2f}, {max_y:.2f}) avec T={max_temp_val:.2f}¬∞C")
        except (ValueError, IndexError):
            # G√©rer le cas o√π toutes les valeurs sont masqu√©es ou autres erreurs
            print("[AVERTISSEMENT] Impossible de trouver le point maximum sur la grille filtr√©e.")
            point_max_trouve = False
        # 11. Afficher la heatmap et les points originaux
        contour = ax.contourf(xi, yi, ti_masked, levels=100, cmap="plasma") # levels=100 pour un d√©grad√© lisse
        fig.colorbar(contour, ax=ax, label="Temp√©rature (¬∞C)")
        ax.scatter(x_orig, y_orig, color='black', marker='o', s=25, label='Thermistances') # Afficher seulement les points r√©els
        
        # 12 Annoter seulement les points r√©els
        for i in range(len(x_orig)):
            # Trouver le nom correspondant √† x_orig[i], y_orig[i] peut √™tre un peu complexe
            # On peut le faire en retrouvant l'index original ou en cherchant par position
            # Ici, on suppose que l'ordre de x_orig correspond √† l'ordre des thermistances valides
            # C'est plus simple si on it√®re sur les positions originales et on v√©rifie la validit√©
            original_index_in_positions = -1
            for k in self.indices_√†_garder:
                if self.positions[k][1] == (x_orig[i], y_orig[i]):
                    original_index_in_positions = k
                    break
            if original_index_in_positions != -1:
                name = self.positions[original_index_in_positions][0]
                ax.annotate(name, (x_orig[i], y_orig[i]), textcoords="offset points", xytext=(4, 4), ha='left', fontsize=8)
        # 13. Si un point maximum a √©t√© trouv√©, l'afficher sur le graphique en vert
        if point_max_trouve:
            # Utiliser un cercle vert ('go') ou une √©toile verte ('g*')
            ax.plot(max_x, max_y, 'go', markersize=10, label=f'Laser estim√© @ ({max_x:.1f}, {max_y:.1f})')

        ax.set_aspect('equal')
        ax.set_title(f"Map de chaleur (Tps: {elapsed_time:.2f} s) - Bords ajust√©s")
        ax.set_xlabel("X (mm)")
        ax.set_ylabel("Y (mm)")
        ax.set_xlim(-r_max - 1, r_max + 1) # L√©g√®re marge pour la visualisation
        ax.set_ylim(-r_max - 1, r_max + 1)
        # ax.legend() # D√©commenter si tu veux une l√©gende pour les points NaN/r√©els
        fig.tight_layout()

# --- Assure-toi que le reste de ta classe et l'appel √† cette fonction restent corrects ---



    def demarrer_acquisition_live(self, interval=0.2):
        if not self.est_connecte() and not self.simulation:
            print("Arduino non connect√©.")
            return

        print("üöÄ Acquisition live en cours... (Ctrl+C pour arr√™ter)")
        fig = plt.figure(figsize=(6, 6))
        plt.ion()
        fig.show()

        all_data = []
        headers = [self.positions[i][0] for i in self.indices_√†_garder] + ["T_ref", "timestamp"]
        start_time = time.time()
        try:
            while True:
                current_time = time.time()
                elapsed_time = current_time - start_time
                data = self.get_temperatures()

                if data:
                    os.system("clear")
                    print("=" * 60)
                    print(f"‚è±Ô∏è Temps √©coul√©: {elapsed_time:.2f} secondes")
                    print("-" * 60)
                    print("Temp√©ratures mesur√©es")
                    print("-" * 60)
                    for name, temp in data.items():
                        print(f"{name:<6} : {temp:6.2f} ¬∞C")
                    print("=" * 60)

                    self.afficher_heatmap_dans_figure(data, fig, elapsed_time)
                    fig.canvas.draw()
                    fig.canvas.flush_events()

                    ligne = [data[name] for name in data]
                    ligne.append(25.0)
                    ligne.append(datetime.now().isoformat(timespec='seconds'))
                    all_data.append(ligne)

                else:
                    print("‚ö†Ô∏è Donn√©es incompl√®tes ou non re√ßues.")

                time.sleep(interval)

        except KeyboardInterrupt:
            print("\nüõë Acquisition stopp√©e. Sauvegarde du fichier CSV...")

            desktop_path = Path.home() / "Desktop"
            filename = f"acquisition_thermistances_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            csv_path = desktop_path / filename

            with open(csv_path, mode='w', newline='') as f:
                writer = csv.writer(f)
                writer.writerow(headers)
                writer.writerows(all_data)

            print(f"‚úÖ Donn√©es sauvegard√©es dans : {csv_path}")


if __name__ == "__main__":
    td = TraitementDonnees(simulation=True)
    td.demarrer_acquisition_live(interval=0.05)

